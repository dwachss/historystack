QUnit.test( "initial state undefined", function( assert ) {
	let h = new History();
  assert.ok( h.state === undefined, "state is undefined" );
  assert.ok( h.length === 1, "length is 1" );
  assert.ok( h.atStart === true, "at start" );
  assert.ok( h.atEnd === true, "at end" );
	let s = h.pushState('foo');
	assert.ok( h.state === 'foo', "state is 'foo'" );
	assert.ok( s === 'foo', "'foo' is returned" );
  assert.ok( h.length === 2, "length is 2" );
  assert.ok( h.atStart === false, "past start" );
  assert.ok( h.atEnd === true, "at end" );
	s = h.replaceState('bar');
	assert.ok( h.state === 'bar', "state is 'bar'" );
 	assert.ok( s === 'bar', "'bar' is returned" );
	assert.ok( h.length === 2, "length is 2" );
  assert.ok( h.atStart === false, "past start" );
  assert.ok( h.atEnd === true, "at end" );
	s = h.back();
	assert.ok( h.state === undefined, "state is undefined" );
 	assert.ok( s === undefined, "undefined is returned" );
	assert.ok( h.length === 2, "length is 2" );
  assert.ok( h.atStart === true, "at start" );
  assert.ok( h.atEnd === false, "past end" );
	s = h.forward();
	assert.ok( h.state === 'bar', "state is 'bar'" );
 	assert.ok( s === 'bar', "'bar' is returned" );
	assert.ok( h.length === 2, "length is 2" );
  assert.ok( h.atStart === false, "past start" );
  assert.ok( h.atEnd === true, "at end" );
});
QUnit.test( "initial state foo", function( assert ) {
	let h = new History('foo');
  assert.ok( h.state === 'foo', "state is 'foo'" );
  assert.ok( h.length === 1, "length is 1" );
  assert.ok( h.atStart === true, "at start" );
  assert.ok( h.atEnd === true, "at end" );
	h.pushState('bar');
	h.pushState('baz');
	h.pushState('qux');
  assert.ok( h.state === 'qux', "state is 'qux'" );
  assert.ok( h.length === 4, "length is 4" );
  assert.ok( h.atStart === false, "past start" );
  assert.ok( h.atEnd === true, "at end" );
	h.go(-2);
	assert.ok( h.state === 'bar', "state is 'bar'" );
  assert.ok( h.length === 4, "length is 4" );
  assert.ok( h.atStart === false, "past start" );
  assert.ok( h.atEnd === false, "before end" );
});

